{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Bold;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\ul How to run the app and the test cases:\
\ulnone \
To run the app, navigate to the project folder i.e., RoomBookingSystem in the terminal and type in \'93
\f1\fs26 mvn clean compile exec:java\'94 and to run the test cases navigate to the same place and type in \'93mvn clean test\'94.\
\
\ul \
Extra features:\
\ulnone \
1. There is an additional feature which displays all the transactions done for a room regardless of person still exists in the university or not.\
2. Another one is if the person is if a person has made some bookings and then if that person is removed from the system, then all the bookings that person made will be cancelled and those rooms will be made available at those slots automatically.\
3. Booking can be made one day in advance i.e., date of the booking should be greater than current date.\
\
\ul \
Navigating through the UIs:\
\ulnone \
In command line interface the following are the commands (they are available with \'91Help\'92 command also):
\f2\b\fs40 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0\fs26 \cf0  Enter the time as 'h:m' for example '6:0'. No need of extra preceding zero like '06:00'.\
 1. To add a person : Add-person <personName> <emailAddress>\
 2. To remove a person : Remove-person <emailAddressOfThePerson>\
 3. To add a building : Add-building <buildingName> <buildingAddress>\
 4. To remove a building : Remove-building <buildingName>\
 5. To add a room : Add-room <roomName> <buildingName>\
 6. To remove a room : Remove-room <roomName> <buildingName>\
 7. To make a booking : Book-room <personEmailAddress> <date in dd\'97mm\'97yyyy> <roomName> <startTimeOfTheBooking> <endTimeOfTheBooking>\
 8. To cancel a booking : Cancel-booking <personEmailAddressWhoMadeTheBooking> <date in dd\'97mm\'97yyyy> <roomName> <startTimeOfTheBooking> <endTimeOfTheBooking>\
 9. To get all the rooms free at a given time : Rooms-given-time <timeRequired> <date in dd\'97mm\'97yyyy>\
 10. To get all the rooms free for the whole of given time slot : Rooms-slot <startTime> <endTime> <date in dd\'97mm\'97yyyy>\
 11. To get the schedule for a particular room : Schedule-of-a-room <roomName> <date in dd\'97mm\'97yyyy>\
 12. To get all the bookings done by a particular person : Booking-by-a-person <personName> <personEmail>\
 13. To save all the data : Save\
 14. To load from saved data : Load\
 15. To quit the command line interface of the booking system : Quit-cl-ui\
 16. To get the list of all transactions made against a particular room : List-of-all-bookings-for-a-room <roomName>\
\
GUI is intuitive and can be navigated easily as all the information is available once if the appropriate button is clicked.\
\
\ul \
Project folder structure:\
\ulnone \
1. For source code, navigate to RoomBookingSystem -> src -> main -> java. Here the packages of model, view and controller can be found along with the main class.\
2. For Junit code, navigate to RoomBookingSystem -> src -> test -> java -> model. Here the UniversityRoomBookingModelTest.java file can be found.\
\
\
\ul Note:\ulnone \
\
I would like to explain few considerations that are made in order to fulfill the requirements. \
1. The booking is stored and displayed according to the roof time slot. Meaning, if the room is booked from 10:00 to 10:20 then the booking chart for that room shows \
10:00 - available\
10:05 - booked\
10:10 - booked\
10:15 - booked\
10:20 - booked\
This is NOT TO BE CONFUSED as the room is booked only from 10:05 to 10:20 because if it shows that 10:00 is available, it means that the time slot 9:55 to 10:00 is available. 10:05 is booked means the room is booked for the slot 10:00 to 10:05 which is represented by the roof of the 5 minute time slot that is 10:05.\
If you try to make another booking from 9:55 to 10:05 just to check it, it will show that the room is booked from 10:00 to 10:05. There is a test case which checks and confirms this as well.\
\
2. Another one is, I have consciously left the propertyChange empty as the model updates all the views irrespective of where the request is coming from as model doesn\'92t have that information. And if try and pass the information to the model from the controller that from which view did the request come from, that negates the MVC/MD design pattern. So to make sure that I won\'92t contradict the MVC/MD design pattern and satisfying all the requirements, I have made this decision.\
\
3. In the GUI while removing a person no need to give the personName value as it doesn\'92t check for that as email is the unique identity for a person. As I have made a common Jframe window to add and remove person, it displays the personName text area, but DONOT confuse that even if you type in different personName even if that name doesn\'92t exist in the system it removes the person and this is not an error or a bug as it DOESN\'92T check for the person name while removing a person.\
\
4. Room name must unique along with the building name and person\'92s email address.\
\
5. Finally, in Junit I have clustered all the cases related to a particular functionality into one rather having a different test case for each expected functionality.}